<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://xmlns.jcp.org/xml/ns/javaee" xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd" id="WebApp_ID" version="3.1">
  <display-name>Solvebank!</display-name>
  <description>
      This is version X.X of an application to perform
      a wild and wonderful task, based on servlets and
      JSP pages.  It was written by Dariusz Ustrzycki
      (us3cki@zoho.com), who should be contacted for
      more information.
    </description>
  <welcome-file-list>
    <welcome-file>home</welcome-file>
    <welcome-file>index.html</welcome-file>
    <welcome-file>index.htm</welcome-file>
    <welcome-file>index.jsp</welcome-file>
    <welcome-file>default.html</welcome-file>
    <welcome-file>default.htm</welcome-file>
    <welcome-file>default.jsp</welcome-file>
  </welcome-file-list>
  <context-param>
    <description>The EMAIL address of the administrator to whom questions 
      and comments about this application should be addressed.</description>
    <param-name>webmaster</param-name>
    <param-value>us3cki@zoho.com</param-value>
  </context-param>
  <context-param>
    <description>login of the application administrator</description>
    <param-name>adminLogin</param-name>
    <param-value>admin</param-value>
  </context-param>
  <context-param>
    <description>initial password of the application administrator</description>
    <param-name>adminPass</param-name>
    <param-value>qwe</param-value>
  </context-param>
  <context-param>
    <description>number of solutions and exercises displayed on a webpage</description>
    <param-name>numberOfDisplayed</param-name>
    <param-value>5</param-value>
  </context-param>
  <servlet>
    <servlet-name>firstServlet</servlet-name>
    <servlet-class>pl.coderslab.controller.First</servlet-class>
    <init-param>
      <param-name>database</param-name>
      <param-value>CustomerSupport</param-value>
    </init-param>
    <init-param>
      <param-name>server</param-name>
      <param-value>10.0.12.5</param-value>
    </init-param>
    <load-on-startup>1</load-on-startup>
  </servlet>
  <servlet-mapping>
    <servlet-name>firstServlet</servlet-name>
    <url-pattern>/first</url-pattern>
  </servlet-mapping>
  <filter>
    <filter-name>EncodingFilter</filter-name>
    <filter-class>pl.coderslab.filters.EncodingFilter</filter-class>
    <init-param>
      <description>encoding for the request and response</description>
      <param-name>charset</param-name>
      <param-value>UTF-8</param-value>
    </init-param>
    <init-param>
      <param-name>contentType</param-name>
      <param-value>text/html</param-value>
    </init-param>
  </filter>
  <filter-mapping>
    <filter-name>EncodingFilter</filter-name>
    <url-pattern>/*</url-pattern>
  </filter-mapping>
  <filter>
    <filter-name>LoginFilter</filter-name>
    <filter-class>pl.coderslab.filters.LoginFilter</filter-class>
  </filter>
  <filter-mapping>
    <filter-name>LoginFilter</filter-name>
    <url-pattern>/*</url-pattern>
  </filter-mapping>
  <filter>
    <filter-name>AdminAuthFilter</filter-name>
    <filter-class>pl.coderslab.filters.AdminAuthFilter</filter-class>
  </filter>
  <filter-mapping>
    <filter-name>AdminAuthFilter</filter-name>
    <url-pattern>/admin/*</url-pattern>
  </filter-mapping>
  
  <!-- Note  As of Servlet 3.0/Java EE 6, you can skip the deployment descriptor and
configure most of these options programmatically using the ServletContext . Use the
setSessionTrackingModes method to specify a Set of one or more javax
.servlet.SessionTrackingMode enum constants. getSessionCookieConfig
returns a javax.servlet.SessionCookieConfig — use this object to configure any
of the <cookie-config> settings. You can configure the tracking modes or cookie con-
figuration only within a ServletContextListener ’s contextInitialized method
or a ServletContainerInitializer ’s onStartup method. You learn about listeners
in the “Applying Sessions Usefully” section, and ServletContainerInitializer s in
Chapter 12. Currently you cannot configure the session timeout programmatically —
this oversight should be corrected in Java EE 8. -->
  
  <!-- since JEE 6 If a browser that supports HttpOnly detects a cookie containing the HttpOnly flag, and client side script code 
  attempts to read the cookie, the browser returns an empty string as the result. This causes the attack to fail 
  by preventing the malicious (usually XSS) code from sending the data to an attacker's website-->
  <session-config>
	<session-timeout>30</session-timeout> <!-- Tomcat’s default container is 30 -->
	<cookie-config>
		<http-only>true</http-only>
		<secure>false</secure><!-- hould be changed to true only if you have HTTPS enabled. -->
	</cookie-config>
	<tracking-mode>COOKIE</tracking-mode> <!-- Specifying COOKIE as the only
tracking mode tells the container to never embed sessions in URLs and always assume the user has
cookies enabled. -->
	
	<!-- <tracking-mode>URL</tracking-mode>The container only embeds session IDs in URLs. It does not use cookies or SSL
session IDs. This approach is not very secure. which technique the container should use for tracking session IDs. -->

	<!-- The container uses SSL Session IDs as HTTP session IDs. This method is the most
secure approach available but requires all requests to be HTTPS for it to work properly. <tracking-mode>SSL</tracking-mode> -->
</session-config>
  
  
</web-app>